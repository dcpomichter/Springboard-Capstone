{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kpape/OneDrive/Documents/GitHub/Springboard-Capstone/my-app/src/dbConfig/dbConfig.ts"],"sourcesContent":["import mongoose from 'mongoose'\r\n\r\nexport async function connect() {\r\n    try {\r\n        mongoose.connect(process.env.MONGO_URI!)\r\n        const connection = mongoose.connection\r\n\r\n        connection.on('connected', () => {\r\n            console.log('MongoDB Connected successfully')\r\n        })\r\n\r\n        connection.on('error', (err) => {\r\n            console.log('MongoDB connection error. Please make sure MongoDB is running ' + err)\r\n            process.exit();\r\n        })\r\n    }\r\n    catch (err) {\r\n        console.log('Something went wrong!')\r\n        console.log(err)\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe;IAClB,IAAI;QACA,oHAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QACtC,MAAM,aAAa,oHAAQ,CAAC,UAAU;QAEtC,WAAW,EAAE,CAAC,aAAa;YACvB,QAAQ,GAAG,CAAC;QAChB;QAEA,WAAW,EAAE,CAAC,SAAS,CAAC;YACpB,QAAQ,GAAG,CAAC,mEAAmE;YAC/E,QAAQ,IAAI;QAChB;IACJ,EACA,OAAO,KAAK;QACR,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC;IAChB;AACJ","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kpape/OneDrive/Documents/GitHub/Springboard-Capstone/my-app/src/models/userModel.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    username: {\r\n        type: String,\r\n        required: [true, \"Please provide a Username\"],\r\n        unique: true\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: [true, \"Please provide an email\"]\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: [true, \"Please provide an email\"],\r\n        unique: true\r\n    },\r\n    isVerified: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    isAdmin: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    library: [\r\n        {\r\n            type: mongoose.Schema.Types.ObjectId,\r\n            ref: 'Game'\r\n        }\r\n    ],\r\n    reviews: [\r\n        {\r\n            type: mongoose.Schema.Types.ObjectId,\r\n            ref: 'Review'\r\n        }\r\n    ],\r\n    forgotPasswordToken: String,\r\n    forgotPasswordTokenExpiry: Date,\r\n    verifyToken: String,\r\n    verifyTokenExpiry: Date\r\n})\r\n\r\nconst User = mongoose.models.User || mongoose.model(\"User\", userSchema)\r\n\r\nexport default User\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAa,IAAI,oHAAQ,CAAC,MAAM,CAAC;IACnC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,QAAQ;IACZ;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;IAC/C;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IACZ;IACA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IACA,SAAS;QACL,MAAM;QACN,SAAS;IACb;IACA,SAAS;QACL;YACI,MAAM,oHAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACT;KACH;IACD,SAAS;QACL;YACI,MAAM,oHAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACT;KACH;IACD,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AACvB;AAEA,MAAM,OAAO,oHAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,oHAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE7C","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kpape/OneDrive/Documents/GitHub/Springboard-Capstone/my-app/src/app/api/users/login/route.ts"],"sourcesContent":["import { connect } from \"@/dbConfig/dbConfig\";\r\nimport User from \"@/models/userModel\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from 'jsonwebtoken'\r\n\r\nconnect()\r\n\r\n\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        const reqBody = await request.json()\r\n        const { email, password } = reqBody\r\n\r\n        //verify if user exists\r\n        const user = await User.findOne({ email })\r\n        if (!user) {\r\n            return NextResponse.json({ error: \"User does not exist\" }, { status: 400 })\r\n        }\r\n\r\n        //check password\r\n        const validPassword = await bcrypt.compare(password, user.password)\r\n        if (!validPassword) {\r\n            return NextResponse.json({ error: \"Password is not correct\" }, { status: 400 })\r\n        }\r\n\r\n        //create Token\r\n        const tokenData = {\r\n            id: user._id,\r\n            username: user.username,\r\n            email: user.email\r\n        }\r\n        const token = await jwt.sign(tokenData, process.env.TOKEN_SECRET!, { expiresIn: \"1d\" })\r\n\r\n        const response = NextResponse.json({\r\n            message: \"User Logged in\",\r\n            success: true,\r\n        })\r\n\r\n        response.cookies.set(\"token\", token, {\r\n            httpOnly: true\r\n        })\r\n\r\n        return response\r\n\r\n    }\r\n    catch (error: any) {\r\n        return NextResponse.json({ error: error.message }, { status: 500 })\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAA,wIAAO;AAGA,eAAe,KAAK,OAAoB;IAC3C,IAAI;QACA,MAAM,UAAU,MAAM,QAAQ,IAAI;QAClC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,uBAAuB;QACvB,MAAM,OAAO,MAAM,uIAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QACxC,IAAI,CAAC,MAAM;YACP,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,gBAAgB;QAChB,MAAM,gBAAgB,MAAM,8IAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAClE,IAAI,CAAC,eAAe;YAChB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,cAAc;QACd,MAAM,YAAY;YACd,IAAI,KAAK,GAAG;YACZ,UAAU,KAAK,QAAQ;YACvB,OAAO,KAAK,KAAK;QACrB;QACA,MAAM,QAAQ,MAAM,kJAAG,CAAC,IAAI,CAAC,WAAW,QAAQ,GAAG,CAAC,YAAY,EAAG;YAAE,WAAW;QAAK;QAErF,MAAM,WAAW,gJAAY,CAAC,IAAI,CAAC;YAC/B,SAAS;YACT,SAAS;QACb;QAEA,SAAS,OAAO,CAAC,GAAG,CAAC,SAAS,OAAO;YACjC,UAAU;QACd;QAEA,OAAO;IAEX,EACA,OAAO,OAAY;QACf,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrE;AACJ","debugId":null}}]
}